from random import randint
#Task_1
# üìå–°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é-–∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞:
# ‚óã–æ—Ç 1 –¥–æ 100 –¥–ª—è –∑–∞–≥–∞–¥—ã–≤–∞–Ω–∏—è, ‚óã–æ—Ç 1 –¥–æ 10 –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
# üìå–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–æ—Å–∏—Ç —É–≥–∞–¥–∞—Ç—å
# –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫.
# from random import randint
#
# def main():
#     upper_limit, find_try = int(input('–ü—Ä–µ–¥–µ–ª? ')), int(input('–ü–æ–ø—ã—Ç–æ–∫?  '))
#
#     def try_to_guess():
#         lower_limit = 1
#         num = randint(lower_limit, upper_limit)
#         print(f'–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç {lower_limit} –¥–æ {upper_limit}.\n')
#         nonlocal find_try
#         tmp = find_try
#
#         while find_try > 0:
#             guess_try = int(input('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ: '))
#             find_try -= 1
#             if guess_try < num:
#                 print('–£ –º–µ–Ω—è –±–æ–ª—å—à–µ.')
#             if guess_try > num:
#                 print('–£ –º–µ–Ω—è –º–µ–Ω—å—à–µ.')
#             if guess_try == num:
#                 print(f'\n–¢—ã —É–≥–∞–¥–∞–ª –∑–∞ {tmp - find_try} –ø–æ–ø—ã—Ç–æ–∫! –ß–∏—Å–ª–æ {num}.')
#         else:
#             print(f'\n–ù–µ —É–≥–∞–¥–∞–ª! –Ø –∑–∞–≥–∞–¥–∞–ª {num}.')
#     return try_to_guess
#
#
#
# a = main()
# a()
#Task_2
# üìå–î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 1.
# üìå–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –≤–Ω–µ—à–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.
# üìå–û–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ö–æ–¥—è—Ç –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é—É–≥–∞–¥–∞–π–∫—É —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã [1, 100] –∏ [1, 10].
# üìå–ï—Å–ª–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç, –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.

#
# def main(func):
#     def wrapper(upper_limit, find_try):
#         if not 0 < upper_limit < 100:
#             upper_limit = randint(1, 100)
#         if not 0 < find_try < 10:
#             find_try = randint(1, 10)
#         func(upper_limit, find_try)
#     return wrapper
#
# @main
# def try_to_guess(upper_limit, find_try):
#     num = randint(1, upper_limit)
#     print(f'–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {upper_limit}.\n')
#     tmp = find_try
#     while find_try > 0:
#         guess_try = int(input('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ: '))
#         find_try -= 1
#         if guess_try < num:
#             print('–£ –º–µ–Ω—è –±–æ–ª—å—à–µ.')
#         if guess_try > num:
#             print('–£ –º–µ–Ω—è –º–µ–Ω—å—à–µ.')
#         if guess_try == num:
#             print(f'\n–¢—ã —É–≥–∞–¥–∞–ª –∑–∞ {tmp - find_try} –ø–æ–ø—ã—Ç–æ–∫! –ß–∏—Å–ª–æ {num}.')
#     else:
#         print(f'\n–ù–µ —É–≥–∞–¥–∞–ª! –Ø –∑–∞–≥–∞–¥–∞–ª {num}.')
#
#
#
# try_to_guess(10, 500)

#Task_3
# üìå–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ json —Ñ–∞–π–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
# –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è.
# üìå–ö–∞–∂–¥—ã–π –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á json —Å–ª–æ–≤–∞—Ä—è.
# üìå–î–ª—è –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
# üìå–ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
# def json_saver(func):
#     def wrapper(*args, **kwargs):
#         with open(f'{func.__name__}.json', 'a') as file:
#             temp_dict = {'args' : args}
#             temp_dict.update(kwargs)
#             result = func(*args, **kwargs)
#             temp_dict['result'] =  result
#             json.dump(temp_dict, file, indent=3, ensure_ascii=False)
#         return result
#     return wrapper
#
#
# with open('example.json', 'r') as file:
#     data = json.load(file)
#     print(data)

# Task_4
# üìå–°–æ–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º.
# üìå–ü–∞—Ä–∞–º–µ—Ç—Ä - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
# def call_count(num):
#     def decorator(func):
#         result = []
#         def wrapper(*args, **kwargs):
#             for _ in range(num):
#                 result.append(func(*args, **kwargs))
#             return result
#         return wrapper
#     return decorator
#
#
# @call_count(5)
# def printer(string):
#     print(string)
#     return 'ok'
#
# print(printer('—Å—Ä–∞–±–æ—Ç–∞–ª–æ!'))


# Task_5
# üìå–û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–¥–∞—á.
# üìå–§—É–Ω–∫—Ü–∏—é —É–≥–∞–¥–∞–π–∫—É –∑–∞–¥–µ–∫–æ—Ä–∏—Ä—É–π—Ç–µ: ‚óã–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤,
# ‚óã–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –∏ ‚óã–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
# üìå–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤.
# @call_count(3)
# @value_control
# @json_saver
# def try_to_guess(upper_limit, find_try):
#     num = randint(1, upper_limit)
#     print(f'–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {upper_limit}.\n')
#     tmp = find_try
#     while find_try > 0:
#         guess_try = int(input('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ: '))
#         find_try -= 1
#         if guess_try < num:
#             print('–£ –º–µ–Ω—è –±–æ–ª—å—à–µ.')
#         if guess_try > num:
#             print('–£ –º–µ–Ω—è –º–µ–Ω—å—à–µ.')
#         if guess_try == num:
#             print(f'\n–¢—ã —É–≥–∞–¥–∞–ª –∑–∞ {tmp - find_try} –ø–æ–ø—ã—Ç–æ–∫! –ß–∏—Å–ª–æ {num}.')
#     else:
#         print(f'\n–ù–µ —É–≥–∞–¥–∞–ª! –Ø –∑–∞–≥–∞–¥–∞–ª {num}.')
#
# try_to_guess(50, 3)